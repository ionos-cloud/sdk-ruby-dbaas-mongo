=begin
#IONOS DBaaS MongoDB REST API

#With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.   MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use. 

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1-SNAPSHOT

=end

require 'cgi'

module IonoscloudDbaasMongo
  class LogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get logs of your cluster
    # Retrieves MongoDB logs based on the given parameters.
    # @param cluster_id [String] The unique ID of the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start The start time for the query in RFC3339 format. Must not be more than 30 days ago but before the end parameter. The default is 30 days ago.
    # @option opts [Time] :_end The end time for the query in RFC3339 format. Must not be greater than now. The default is the current timestamp.
    # @option opts [String] :direction The direction in which to scan through the logs. The logs are returned in order of the direction. (default to 'BACKWARD')
    # @option opts [Integer] :limit The maximal number of log lines to return.  If the limit is reached then log lines will be cut at the end (respecting the scan direction). (default to 100)
    # @return [ClusterLogs]
    def clusters_logs_get(cluster_id, opts = {})
      data, _status_code, _headers = clusters_logs_get_with_http_info(cluster_id, opts)
      data
    end

    # Get logs of your cluster
    # Retrieves MongoDB logs based on the given parameters.
    # @param cluster_id [String] The unique ID of the cluster.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start The start time for the query in RFC3339 format. Must not be more than 30 days ago but before the end parameter. The default is 30 days ago.
    # @option opts [Time] :_end The end time for the query in RFC3339 format. Must not be greater than now. The default is the current timestamp.
    # @option opts [String] :direction The direction in which to scan through the logs. The logs are returned in order of the direction.
    # @option opts [Integer] :limit The maximal number of log lines to return.  If the limit is reached then log lines will be cut at the end (respecting the scan direction).
    # @return [Array<(ClusterLogs, Integer, Hash)>] ClusterLogs data, response status code and response headers
    def clusters_logs_get_with_http_info(cluster_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsApi.clusters_logs_get ...'
      end
      # verify the required parameter 'cluster_id' is set
      if @api_client.config.client_side_validation && cluster_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_id' when calling LogsApi.clusters_logs_get"
      end
      allowable_values = ["BACKWARD", "FORWARD"]
      if @api_client.config.client_side_validation && opts[:'direction'] && !allowable_values.include?(opts[:'direction'])
        fail ArgumentError, "invalid value for \"direction\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling LogsApi.clusters_logs_get, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling LogsApi.clusters_logs_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clusters/{clusterId}/logs'.sub('{' + 'clusterId' + '}', CGI.escape(cluster_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterLogs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'tokenAuth']

      new_options = opts.merge(
        :operation => :"LogsApi.clusters_logs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#clusters_logs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
